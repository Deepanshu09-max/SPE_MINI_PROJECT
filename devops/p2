pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_NAME = 'my_calculator'
        DOCKER_TAG = 'deepanshu0903/scientific-calculator:latest'
        GITHUB_REPO_URL = 'https://github.com/Deepanshu09-max/SPE_MINI_PROJECT.git'
        DOCKER_CREDENTIALS_ID = 'DockerHubCred'  // Ensure correct Jenkins credential ID
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    python3 -m pip install --upgrade pip
                    python3 -m pip install -r requirements.txt
                '''
            }
        }

        stage('Run Unit Tests') {
            steps {
                sh '''
                    bash -c "python3 -m venv venv && \
                    source venv/bin/activate && \
                    python3 -m pip install --upgrade pip && \
                    python3 -m pip install -r requirements.txt && \
                    pytest test.py --tb=short --disable-warnings"
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker --version'  // Verify Docker installation
                    sh "docker build -t ${DOCKER_IMAGE_NAME} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, 
                                                 usernameVariable: 'DOCKER_USERNAME', 
                                                 passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                    '''
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    sh "docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_TAG}"
                    sh "docker push ${DOCKER_TAG}"
                }
            }
        }

        stage('Clean Up Docker Images') {
            steps {
                sh "docker rmi ${DOCKER_TAG} || true"  // Remove old images to free space
                sh "docker rmi ${DOCKER_IMAGE_NAME} || true"
            }
        }

        stage('Deploy using Ansible') {
            steps {
                   sh """
                  ansible-playbook -i inventory calc-playbook.yml
                """



                }
        }
    }
     post {
        always {
            script {
                // Grab relevant environment variables
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def buildUrl = env.BUILD_URL

                // Jenkins sets currentBuild.result, or 'UNKNOWN' if not set yet
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'

                // Choose a color based on success/failure
                def bannerColor = (pipelineStatus.toUpperCase() == 'SUCCESS') ? 'green' : 'red'

                // Define an HTML body with inline CSS
                def body = """
                <html>
                  <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                      <h2>${jobName} Build #${buildNumber}</h2>
                      <div style="background-color: ${bannerColor}; padding: 10px;">
                        <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                        <p>Check the <a href="${buildUrl}">console output</a> for more details.</p>
                      </div>
                    </div>
                  </body>
                </html>
                """

                // Send the email using the Email Extension plugin
                emailext(
                    subject: "${jobName} Build #${buildNumber} - ${pipelineStatus}",
                    body: body,
                    to: 'deepanshusaini7732@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html',
                    // Attach a file pattern if you have logs or artifacts named "a.txt" etc.
                    attachmentsPattern: 'a.txt'
                )
            }
        }
    }
}

