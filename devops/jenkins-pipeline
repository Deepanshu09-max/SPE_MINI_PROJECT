pipeline {
    agent any
    
    environment {
        DOCKER_FE_IMAGE_NAME = 'calc-frontend'
        DOCKER_BE_IMAGE_NAME = 'calc-backend'
        FE_TAG = 'deepanshu0903/calc-frontend:latest'
        BE_TAG = 'deepanshu0903/calc-backend:latest'
        GITHUB_REPO_URL = 'https://github.com/Deepanshu09-max/SPE_MINI_PROJECT.git'
        DOCKER_CREDENTIALS_ID = 'DockerHubCred'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh 'docker --version'
                    sh "docker build -t ${DOCKER_BE_IMAGE_NAME} ./backend"
                    sh "docker build -t ${DOCKER_FE_IMAGE_NAME} ./frontend"
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID,
                                                 usernameVariable: 'DOCKER_USERNAME',
                                                 passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                    '''
                }
            }
        }

        stage('Push to Docker Hub and clean') {
            steps {
                script {
                    sh "docker tag ${DOCKER_BE_IMAGE_NAME} ${BE_TAG}"
                    sh "docker push ${BE_TAG}"
                    sh "docker tag ${DOCKER_FE_IMAGE_NAME} ${FE_TAG}"
                    sh "docker push ${FE_TAG}"
                }
                 script {
                    // Remove pushed images to free space on Jenkins agent
                    sh "docker rmi ${BE_TAG} || true"
                    sh "docker rmi ${DOCKER_BE_IMAGE_NAME} || true"
                    sh "docker rmi ${FE_TAG} || true"
                    sh "docker rmi ${DOCKER_FE_IMAGE_NAME} || true"
                }
            }
        }

        stage('Deploy using Ansible') {
            steps {
                sh '''
                  cd devops
                  ansible-playbook -i inventory calc-playbook.yml
                '''
            }
        }

    }
        
       post {
        always {
            script {
                echo '=== Send Email Notification ==='
                
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def buildUrl = env.BUILD_URL
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = (pipelineStatus.toUpperCase() == 'SUCCESS') ? 'green' : 'red'
    
                def body = """
                <html>
                  <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                      <h2>${jobName} Build #${buildNumber}</h2>
                      <div style="background-color: ${bannerColor}; padding: 10px;">
                        <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                        <p>Check the <a href="${buildUrl}">console output</a> for more details.</p>
                      </div>
                    </div>
                  </body>
                </html>
                """
    
                emailext(
                    subject: "${jobName} Build #${buildNumber} - ${pipelineStatus}",
                    body: body,
                    to: 'deepanshusaini7732@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html'
                )
            }
        }
    }

}

